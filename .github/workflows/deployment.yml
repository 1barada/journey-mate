name: Validate, build and deploy

on:
  push:
    branches:
      - main
      - master

permissions:
  actions: read
  contents: read

jobs:
  validate:
    name: Format, lint and typecheck
    uses: ./.github/workflows/pull-request.yml

  build_and_deploy:
    name: Build project and push to S3
    needs:
      - validate
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DESTINATION_BUCKET: ${{ vars.AWS_DESTINATION_BUCKET }}
      AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
      AWS_DEFAULT_REGION: eu-central-1
      AWS_REGION: eu-central-1
      AWS_EC2_METADATA_DISABLED: true
      AWS_ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
      AWS_ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
      AWS_IMAGE_TAG: latest
      AWS_JOURNEY: journey

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18.19.0
          cache: 'npm'
      - run: npm ci
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: master
      - name: Build apps
        id: run-affected
        run: |
          npx cross-env NODE_ENV=production nx affected -t build
          affected_projects=$(npx nx show projects --affected)
          echo "affected_projects=$(echo $affected_projects | tr -d '\n')" >> $GITHUB_ENV

          if [[ "$affected_projects" == *"web"* ]]; then
            echo "isWebAffected=true" >> $GITHUB_ENV
          else
            echo "isWebAffected=false" >> $GITHUB_ENV
          fi

          if [[ "$affected_projects" == *"api"* ]]; then
            echo "isApiAffected=true" >> $GITHUB_ENV
          else
            echo "isApiAffected=false" >> $GITHUB_ENV
          fi

      - name: Temp output of affected projects and conditions
        run: |
          echo "Affected projects: ${{ env.affected_projects }}"
          echo "isWebAffected: ${{ env.isWebAffected }}"
          echo "isApiAffected: ${{ env.isApiAffected }}"

      - name: Deploy landing to AWS S3
        if: ${{ env.isWebAffected == 'true' }}

        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ vars.AWS_DESTINATION_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          SOURCE_DIR: ./dist/apps/web

      - name: Invalidate landing AWS Cloudfront
        if: ${{ env.isWebAffected == 'true' }}

        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        if: ${{ env.isApiAffected == 'true' }}
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: login-ecr
        if: ${{ env.isApiAffected == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        if: ${{ env.isApiAffected == 'true' }}
        run: |
          docker build -t ${{env.AWS_ECR_REGISTRY}}/${{env.AWS_ECR_REPOSITORY}}:${{env.AWS_IMAGE_TAG}} .
          docker push ${{env.AWS_ECR_REGISTRY}}/${{env.AWS_ECR_REPOSITORY}}:${{env.AWS_IMAGE_TAG}}

      - name: SSH into EC2 and update Docker container
        if: ${{ env.isApiAffected == 'true' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: ./deploy.sh
